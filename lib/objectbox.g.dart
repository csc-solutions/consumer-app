// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'backend/models/payment_log.dart';
import 'backend/models/transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4618804454351060149),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(19, 8755329377193379155),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8781276084069730392),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5363576776313056651),
            name: 'amountReceived',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 229819085246340484),
            name: 'amount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5878102752321537457),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8305986931400052475),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7264058677602750385),
            name: 'userReference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6293508356562973890),
            name: 'uuid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4943537041431973658),
            name: 'paymentMethodCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8724710210847963717),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3030383297571253175),
            name: 'countryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1072215046016527590),
            name: 'recipient',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5633732686808401858),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3822715295521455656),
            name: 'isMock',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3860362108556479532),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4631079861882208978),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3584914286842630199),
            name: 'customerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1157199010989443061),
            name: 'customerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 6542159976294183066),
            name: 'customerAddress',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8755329377193379155),
            name: 'customerPhone',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5190749310215474288),
      name: 'PaymentLog',
      lastPropertyId: const obx_int.IdUid(11, 2106268387231355317),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8413731802151063849),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 175843362128520194),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2845615337566699016),
            name: 'amount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6263750282429988447),
            name: 'serviceName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8347233097877066548),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4806270593745152372),
            name: 'creditDestination',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5913572540638713264),
            name: 'debitDestination',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7345387511162925630),
            name: 'productName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 42719889324564609),
            name: 'serviceImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1663519098743802921),
            name: 'serviceUuid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2106268387231355317),
            name: 'productUuid',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 5190749310215474288),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1421381205658015858, 2547090182853682123],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1703246547260338526,
        6731676569624953537,
        6648663121894049521,
        4964717895289544376,
        6534113584853299454,
        7187198452262627234,
        7215279626024045783,
        5100979491491859758,
        6182488005674684572,
        2213963246362270488,
        653373784652059345,
        7588859077745166218,
        8356516969774805748,
        5631025596213657778
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[0],
        toOneRelations: (Transaction object) => [],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          final typeOffset = fbb.writeString(object.type);
          final userReferenceOffset = fbb.writeString(object.userReference);
          final uuidOffset = fbb.writeString(object.uuid);
          final paymentMethodCodeOffset =
              fbb.writeString(object.paymentMethodCode);
          final currencyCodeOffset = fbb.writeString(object.currencyCode);
          final countryCodeOffset = fbb.writeString(object.countryCode);
          final recipientOffset = fbb.writeString(object.recipient);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final customerIdOffset = object.customerId == null
              ? null
              : fbb.writeString(object.customerId!);
          final customerNameOffset = object.customerName == null
              ? null
              : fbb.writeString(object.customerName!);
          final customerAddressOffset = object.customerAddress == null
              ? null
              : fbb.writeString(object.customerAddress!);
          final customerPhoneOffset = object.customerPhone == null
              ? null
              : fbb.writeString(object.customerPhone!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.amountReceived);
          fbb.addInt64(2, object.amount);
          fbb.addOffset(3, statusOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, userReferenceOffset);
          fbb.addOffset(6, uuidOffset);
          fbb.addOffset(7, paymentMethodCodeOffset);
          fbb.addOffset(8, currencyCodeOffset);
          fbb.addOffset(9, countryCodeOffset);
          fbb.addOffset(10, recipientOffset);
          fbb.addOffset(11, descriptionOffset);
          fbb.addInt64(12, object.isMock);
          fbb.addInt64(13, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(14, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addOffset(15, customerIdOffset);
          fbb.addOffset(16, customerNameOffset);
          fbb.addOffset(17, customerAddressOffset);
          fbb.addOffset(18, customerPhoneOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final amountReceivedParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final userReferenceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final paymentMethodCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final currencyCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final countryCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final recipientParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final isMockParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final customerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final customerNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final customerAddressParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final customerPhoneParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final object = Transaction(
              amountReceived: amountReceivedParam,
              id: idParam,
              amount: amountParam,
              status: statusParam,
              type: typeParam,
              userReference: userReferenceParam,
              uuid: uuidParam,
              paymentMethodCode: paymentMethodCodeParam,
              currencyCode: currencyCodeParam,
              countryCode: countryCodeParam,
              recipient: recipientParam,
              description: descriptionParam,
              isMock: isMockParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              customerId: customerIdParam,
              customerName: customerNameParam,
              customerAddress: customerAddressParam,
              customerPhone: customerPhoneParam);

          return object;
        }),
    PaymentLog: obx_int.EntityDefinition<PaymentLog>(
        model: _entities[1],
        toOneRelations: (PaymentLog object) => [],
        toManyRelations: (PaymentLog object) => {},
        getId: (PaymentLog object) => object.id,
        setId: (PaymentLog object, int id) {
          object.id = id;
        },
        objectToFB: (PaymentLog object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final creditDestinationOffset =
              fbb.writeString(object.creditDestination);
          final debitDestinationOffset =
              fbb.writeString(object.debitDestination);
          final productNameOffset = fbb.writeString(object.productName);
          final serviceImageOffset = fbb.writeString(object.serviceImage);
          final serviceUuidOffset = fbb.writeString(object.serviceUuid);
          final productUuidOffset = fbb.writeString(object.productUuid);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, codeOffset);
          fbb.addInt64(2, object.amount);
          fbb.addOffset(3, serviceNameOffset);
          fbb.addInt64(4, object.createdAt?.millisecondsSinceEpoch);
          fbb.addOffset(5, creditDestinationOffset);
          fbb.addOffset(6, debitDestinationOffset);
          fbb.addOffset(7, productNameOffset);
          fbb.addOffset(8, serviceImageOffset);
          fbb.addOffset(9, serviceUuidOffset);
          fbb.addOffset(10, productUuidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final serviceNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final serviceUuidParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final productUuidParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final serviceImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final productNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final creditDestinationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final debitDestinationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final object = PaymentLog(
              id: idParam,
              code: codeParam,
              amount: amountParam,
              serviceName: serviceNameParam,
              serviceUuid: serviceUuidParam,
              productUuid: productUuidParam,
              serviceImage: serviceImageParam,
              productName: productNameParam,
              creditDestination: creditDestinationParam,
              debitDestination: debitDestinationParam,
              createdAt: createdAtParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// see [Transaction.id]
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[0].properties[0]);

  /// see [Transaction.amountReceived]
  static final amountReceived =
      obx.QueryIntegerProperty<Transaction>(_entities[0].properties[1]);

  /// see [Transaction.amount]
  static final amount =
      obx.QueryIntegerProperty<Transaction>(_entities[0].properties[2]);

  /// see [Transaction.status]
  static final status =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[3]);

  /// see [Transaction.type]
  static final type =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[4]);

  /// see [Transaction.userReference]
  static final userReference =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[5]);

  /// see [Transaction.uuid]
  static final uuid =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[6]);

  /// see [Transaction.paymentMethodCode]
  static final paymentMethodCode =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[7]);

  /// see [Transaction.currencyCode]
  static final currencyCode =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[8]);

  /// see [Transaction.countryCode]
  static final countryCode =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[9]);

  /// see [Transaction.recipient]
  static final recipient =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[10]);

  /// see [Transaction.description]
  static final description =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[11]);

  /// see [Transaction.isMock]
  static final isMock =
      obx.QueryIntegerProperty<Transaction>(_entities[0].properties[12]);

  /// see [Transaction.createdAt]
  static final createdAt =
      obx.QueryDateProperty<Transaction>(_entities[0].properties[13]);

  /// see [Transaction.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<Transaction>(_entities[0].properties[14]);

  /// see [Transaction.customerId]
  static final customerId =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[15]);

  /// see [Transaction.customerName]
  static final customerName =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[16]);

  /// see [Transaction.customerAddress]
  static final customerAddress =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[17]);

  /// see [Transaction.customerPhone]
  static final customerPhone =
      obx.QueryStringProperty<Transaction>(_entities[0].properties[18]);
}

/// [PaymentLog] entity fields to define ObjectBox queries.
class PaymentLog_ {
  /// see [PaymentLog.id]
  static final id =
      obx.QueryIntegerProperty<PaymentLog>(_entities[1].properties[0]);

  /// see [PaymentLog.code]
  static final code =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[1]);

  /// see [PaymentLog.amount]
  static final amount =
      obx.QueryIntegerProperty<PaymentLog>(_entities[1].properties[2]);

  /// see [PaymentLog.serviceName]
  static final serviceName =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[3]);

  /// see [PaymentLog.createdAt]
  static final createdAt =
      obx.QueryDateProperty<PaymentLog>(_entities[1].properties[4]);

  /// see [PaymentLog.creditDestination]
  static final creditDestination =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[5]);

  /// see [PaymentLog.debitDestination]
  static final debitDestination =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[6]);

  /// see [PaymentLog.productName]
  static final productName =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[7]);

  /// see [PaymentLog.serviceImage]
  static final serviceImage =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[8]);

  /// see [PaymentLog.serviceUuid]
  static final serviceUuid =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[9]);

  /// see [PaymentLog.productUuid]
  static final productUuid =
      obx.QueryStringProperty<PaymentLog>(_entities[1].properties[10]);
}
